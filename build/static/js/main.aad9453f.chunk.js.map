{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","services/login.js","components/LoginForm.js","components/NoteForm.js","components/Togglable.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","token","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","update","id","put","setToken","newToken","Notification","message","Footer","style","color","fontStyle","fontSize","login","credentials","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","value","onChange","type","NoteForm","handleChange","Togglable","buttonLabel","children","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","App","loginVisible","setLoginVisible","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","handleLogin","event","preventDefault","loginService","setItem","stringify","setTimeout","console","log","notesToShow","filter","target","loginForm","name","noteObject","date","Date","toISOString","Math","random","createdNote","concat","map","key","find","n","changedNote","updatedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aad9453f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n  ? 'not important' : 'important'\n  return(\n    <li className='note'>\n        {note.content}\n        <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios';\nconst baseUrl = '/api/notes'\n\nlet token = null\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, setToken }","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n      return null\n  }\n  return (\n      <div className=\"error\">\n          {message}\n      </div>\n  )\n}\n\nexport default Notification;","import React from 'react';\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nexport default Footer;","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","import React from 'react'\n\nconst LoginForm = ({\n  handleSubmit,\n  handleUsernameChange,\n  handlePasswordChange,\n  username,\n  password\n}) => {\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          username\n          <input\n            value={username}\n            onChange={handleUsernameChange}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={handlePasswordChange}\n          />\n        </div>\n        <button type=\"submit\">login</button>\n      </form>\n    </div>\n  )\n}\n\nexport default LoginForm","import React from 'react'\n\nconst NoteForm = ({ onSubmit, handleChange, value }) => (\n  <form onSubmit={onSubmit}>\n    <input value={value} onChange={handleChange} />\n    <button type=\"submit\">save</button>\n  </form>\n)\n\nexport default NoteForm","import React, { useState } from 'react'\n\nconst Togglable = ({ buttonLabel, children }) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Togglable","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\nimport loginService from './services/login';\nimport LoginForm from './components/LoginForm';\nimport NoteForm from './components/NoteForm'\nimport Togglable from './components/Togglable'\n\nconst App = () => {\n\n  const [loginVisible, setLoginVisible] = useState(false)\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => setNotes(initialNotes))\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n    }\n  }, [])\n  \n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(updatedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : updatedNote))\n      })\n      .catch(error => {\n        setErrorMessage(`The note '${note.content}' was already deleted from server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000) \n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n    noteService\n      .create(noteObject)\n      .then(createdNote => {\n        setNotes(notes.concat(createdNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = event => setNewNote(event.target.value)\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('Wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 3000)\n    }\n    console.log('loggin in with', username, password)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const loginForm = () => {\n    const hideWhenVisible = { display: loginVisible ? 'none' : '' }\n    const showWhenVisible = { display: loginVisible ? '' : 'none' }\n\n    return (\n      <div>\n        <div style={hideWhenVisible}>\n          <button onClick={() => setLoginVisible(true)}>login</button>\n        </div>\n        <div style={showWhenVisible}>\n          <LoginForm\n            username={username}\n            password={password}\n            handleUsernameChange={({ target }) => setUsername(target.value)}\n            handlePasswordChange={({ target }) => setPassword(target.value)}\n            handleSubmit={handleLogin}\n          />\n          <button onClick={() => setLoginVisible(false)}>cancel</button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n      <div>\n        <h1>Notes</h1>\n        <Notification message={errorMessage} />\n        \n        { user === null\n          ? loginForm()\n          : <div>\n              <p>{user.name} logged in</p>\n              <Togglable buttonLabel=\"new note\">\n                <NoteForm\n                  value={newNote}\n                  handleSubmit={addNote}\n                  handleChange={handleNoteChange}\n                />\n              </Togglable>\n            </div>\n        }\n\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all'}\n          </button>\n        </div>\n\n        <ul>\n            {notesToShow.map(note => \n            <Note \n              key={note.id}\n              note={note}\n              toggleImportance={() => toggleImportanceOf(note.id)}/>\n            )}\n        </ul>\n\n        <Footer />\n      </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\ndocument.getElementById('root')\n);\n\n"],"sourceRoot":""}